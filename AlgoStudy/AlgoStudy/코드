#include<iostream>

using namespace std;

bool c[10]; int a[10];
void go(int index, int n, int m) {
	if (index == m) {
		for (int i = 0; i < m; i++) {
			cout << a[i];
			if (i != m - 1) cout << ' ';
		}
		cout << '\n';
		return;
	}

	for (int i = 1; i <= n; i++) {
		if (c[i]) continue;
		c[i] = true;
		a[index] = i;
		go(index + 1, n, m);
		c[i] = false;
	}
}
int main() {
	int n, m;
	cin >> n >> m;
	go(0, n, m);

	return 0;

}


//N°ú M(9)
#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
using namespace std;

int N, M;
int input[9];
bool visited[9];
vector<int> vec;
set<vector<int>> S;

void NM9(int n, int m, int cnt)
{
    if (cnt == m)
    {
        S.insert(vec);
        return;
    }

    for (int i = 0; i < n; i++)
    {
        if (visited[i] == 0)
        {
            visited[i] = 1;
            vec.push_back(input[i]);
            NM9(n, m, cnt + 1);
            vec.pop_back();
            visited[i] = 0;
        }
    }
}

int main()
{
    cin >> N >> M;
    for (int i = 0; i < N; i++)
    {
        cin >> input[i];
    }

    sort(input, &input[N]);
    NM9(N, M, 0);
    for (auto iter = S.begin(); iter != S.end(); iter++)
    {
        for (size_t i = 0; i < iter->size(); i++)
        {
            cout << iter->at(i) << " ";
        }
        cout << '\n';
    }

    return 0;
}